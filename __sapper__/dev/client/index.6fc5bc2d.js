import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, a as space, e as element, t as text, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, g as children, h as claim_text, k as add_location, j as attr_dev, l as insert_dev, m as append_dev, n as noop, o as validate_each_argument, p as set_data_dev, r as destroy_each, u as empty } from './client.852e2202.js';

/* src\routes\posts\index.svelte generated by Svelte v3.24.1 */

const file = "src\\routes\\posts\\index.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (85:2) {:else}
function create_else_block(ctx) {
	let a;
	let li;
	let p;
	let t;

	const block = {
		c: function create() {
			a = element("a");
			li = element("li");
			p = element("p");
			t = text("No Posts yet, begin your journey on trello");
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { href: true, target: true, class: true });
			var a_nodes = children(a);
			li = claim_element(a_nodes, "LI", { class: true });
			var li_nodes = children(li);
			p = claim_element(li_nodes, "P", {});
			var p_nodes = children(p);
			t = claim_text(p_nodes, "No Posts yet, begin your journey on trello");
			p_nodes.forEach(detach_dev);
			li_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p, file, 87, 8, 1887);
			attr_dev(li, "class", "svelte-nhnllp");
			add_location(li, file, 86, 6, 1873);
			attr_dev(a, "href", "https://trello.com/b/MNURR8Sv/blog-with-trello");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "class", "svelte-nhnllp");
			add_location(a, file, 85, 4, 1792);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, li);
			append_dev(li, p);
			append_dev(p, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(85:2) {:else}",
		ctx
	});

	return block;
}

// (69:2) {#if posts.length != 0}
function create_if_block(ctx) {
	let each_1_anchor;
	let each_value = /*posts*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*posts*/ 1) {
				each_value = /*posts*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(69:2) {#if posts.length != 0}",
		ctx
	});

	return block;
}

// (79:10) {#each post.tags as tag}
function create_each_block_1(ctx) {
	let span;
	let t_value = /*tag*/ ctx[4].name + "";
	let t;
	let span_class_value;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", span_class_value = "tags " + /*tag*/ ctx[4].color + " svelte-nhnllp");
			add_location(span, file, 79, 12, 1668);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*posts*/ 1 && t_value !== (t_value = /*tag*/ ctx[4].name + "")) set_data_dev(t, t_value);

			if (dirty & /*posts*/ 1 && span_class_value !== (span_class_value = "tags " + /*tag*/ ctx[4].color + " svelte-nhnllp")) {
				attr_dev(span, "class", span_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(79:10) {#each post.tags as tag}",
		ctx
	});

	return block;
}

// (70:4) {#each posts as post}
function create_each_block(ctx) {
	let a;
	let li;
	let t0_value = /*post*/ ctx[1].title + "";
	let t0;
	let t1;
	let p;
	let t2_value = /*post*/ ctx[1].time + "";
	let t2;
	let t3;
	let t4;
	let a_href_value;
	let each_value_1 = /*post*/ ctx[1].tags;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			a = element("a");
			li = element("li");
			t0 = text(t0_value);
			t1 = space();
			p = element("p");
			t2 = text(t2_value);
			t3 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { rel: true, href: true, class: true });
			var a_nodes = children(a);
			li = claim_element(a_nodes, "LI", { class: true });
			var li_nodes = children(li);
			t0 = claim_text(li_nodes, t0_value);
			t1 = claim_space(li_nodes);
			p = claim_element(li_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach_dev);
			t3 = claim_space(li_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(li_nodes);
			}

			li_nodes.forEach(detach_dev);
			t4 = claim_space(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "date svelte-nhnllp");
			add_location(p, file, 77, 10, 1587);
			attr_dev(li, "class", "svelte-nhnllp");
			add_location(li, file, 75, 8, 1547);
			attr_dev(a, "rel", "prefetch");
			attr_dev(a, "href", a_href_value = "posts/" + /*post*/ ctx[1].slug);
			attr_dev(a, "class", "svelte-nhnllp");
			add_location(a, file, 74, 6, 1494);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, li);
			append_dev(li, t0);
			append_dev(li, t1);
			append_dev(li, p);
			append_dev(p, t2);
			append_dev(li, t3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(li, null);
			}

			append_dev(a, t4);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*posts*/ 1 && t0_value !== (t0_value = /*post*/ ctx[1].title + "")) set_data_dev(t0, t0_value);
			if (dirty & /*posts*/ 1 && t2_value !== (t2_value = /*post*/ ctx[1].time + "")) set_data_dev(t2, t2_value);

			if (dirty & /*posts*/ 1) {
				each_value_1 = /*post*/ ctx[1].tags;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(li, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty & /*posts*/ 1 && a_href_value !== (a_href_value = "posts/" + /*post*/ ctx[1].slug)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(70:4) {#each posts as post}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let ul;

	function select_block_type(ctx, dirty) {
		if (/*posts*/ ctx[0].length != 0) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Recent posts");
			t2 = space();
			ul = element("ul");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-rnw242\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Recent posts");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			if_block.l(ul_nodes);
			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Posts";
			add_location(h1, file, 65, 0, 1176);
			attr_dev(ul, "class", "svelte-nhnllp");
			add_location(ul, file, 67, 0, 1201);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, ul, anchor);
			if_block.m(ul, null);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(ul, null);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(ul);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	return await this.fetch(`posts.json`).then(r => r.json()).then(posts => {
		return { posts };
	});
}

function instance($$self, $$props, $$invalidate) {
	let { posts } = $$props;
	const writable_props = ["posts"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Posts> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Posts", $$slots, []);

	$$self.$$set = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	$$self.$capture_state = () => ({ preload, posts });

	$$self.$inject_state = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [posts];
}

class Posts extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { posts: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Posts",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*posts*/ ctx[0] === undefined && !("posts" in props)) {
			console.warn("<Posts> was created without expected prop 'posts'");
		}
	}

	get posts() {
		throw new Error("<Posts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<Posts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Posts;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNmZjNWJjMmQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvcG9zdHMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxyXG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKHsgcGFyYW1zLCBxdWVyeSB9KSB7XHJcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5mZXRjaChgcG9zdHMuanNvbmApXHJcbiAgICAgIC50aGVuKChyKSA9PiByLmpzb24oKSlcclxuICAgICAgLnRoZW4oKHBvc3RzKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHsgcG9zdHMgfTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgZXhwb3J0IGxldCBwb3N0cztcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgdWwge1xyXG4gICAgbWFyZ2luOiAwIDAgMWVtIDA7XHJcbiAgICBsaW5lLWhlaWdodDogMS41O1xyXG4gIH1cclxuICBsaSB7XHJcbiAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XHJcbiAgICBwYWRkaW5nOiAxZW07XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZmYzZTAwO1xyXG4gICAgbWFyZ2luOiAyZW0gMDtcclxuICAgIGJveC1zaGFkb3c6IDE1cHggMTZweCAjZmYzZTAwO1xyXG4gICAgZm9udC1zaXplOiAyMHB4O1xyXG4gIH1cclxuICBsaTpob3ZlciB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMDMzZDJhO1xyXG4gICAgYm94LXNoYWRvdzogOHB4IDZweCAjMDMzZDJhO1xyXG4gICAgdHJhbnNpdGlvbjogYm94LXNoYWRvdyAwLjNzIGVhc2UtaW4tb3V0O1xyXG4gICAgY29sb3I6ICMwMzNkMmE7XHJcbiAgfVxyXG4gIGEge1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIH1cclxuICAuZGF0ZSB7XHJcbiAgICBjb2xvcjogI2ZmM2UwMDtcclxuICB9XHJcbiAgLnRhZ3Mge1xyXG4gICAgbWFyZ2luOiA0cHg7XHJcbiAgICBwYWRkaW5nOiAwIDFlbTtcclxuICB9XHJcbiAgOmdsb2JhbCgueWVsbG93KSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XHJcbiAgICBjb2xvcjogYmxhY2s7XHJcbiAgfVxyXG4gIDpnbG9iYWwoLmdyZWVuKSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcclxuICAgIGNvbG9yOiBibGFjaztcclxuICB9XHJcbiAgOmdsb2JhbCgub3JhbmdlKSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBvcmFuZ2U7XHJcbiAgICBjb2xvcjogYmxhY2s7XHJcbiAgfVxyXG4gIDpnbG9iYWwoLmJsYWNrKSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICB9XHJcbjwvc3R5bGU+XHJcblxyXG48c3ZlbHRlOmhlYWQ+XHJcbiAgPHRpdGxlPlBvc3RzPC90aXRsZT5cclxuPC9zdmVsdGU6aGVhZD5cclxuXHJcbjxoMT5SZWNlbnQgcG9zdHM8L2gxPlxyXG5cclxuPHVsPlxyXG4gIHsjaWYgcG9zdHMubGVuZ3RoICE9IDB9XHJcbiAgICB7I2VhY2ggcG9zdHMgYXMgcG9zdH1cclxuICAgICAgPCEtLSB3ZSdyZSB1c2luZyB0aGUgbm9uLXN0YW5kYXJkIGByZWw9cHJlZmV0Y2hgIGF0dHJpYnV0ZSB0b1xyXG5cdFx0XHQgIHRlbGwgU2FwcGVyIHRvIGxvYWQgdGhlIGRhdGEgZm9yIHRoZSBwYWdlIGFzIHNvb24gYXNcclxuXHRcdFx0ICB0aGUgdXNlciBob3ZlcnMgb3ZlciB0aGUgbGluayBvciB0YXBzIGl0LCBpbnN0ZWFkIG9mXHJcblx0XHRcdCAgd2FpdGluZyBmb3IgdGhlICdjbGljaycgZXZlbnQgLS0+XHJcbiAgICAgIDxhIHJlbD1cInByZWZldGNoXCIgaHJlZj1cInBvc3RzL3twb3N0LnNsdWd9XCI+XHJcbiAgICAgICAgPGxpPlxyXG4gICAgICAgICAge3Bvc3QudGl0bGV9XHJcbiAgICAgICAgICA8cCBjbGFzcz1cImRhdGVcIj57cG9zdC50aW1lfTwvcD5cclxuICAgICAgICAgIHsjZWFjaCBwb3N0LnRhZ3MgYXMgdGFnfVxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRhZ3Mge3RhZy5jb2xvcn1cIj57dGFnLm5hbWV9PC9zcGFuPlxyXG4gICAgICAgICAgey9lYWNofVxyXG4gICAgICAgIDwvbGk+XHJcbiAgICAgIDwvYT5cclxuICAgIHsvZWFjaH1cclxuICB7OmVsc2V9XHJcbiAgICA8YSBocmVmPVwiaHR0cHM6Ly90cmVsbG8uY29tL2IvTU5VUlI4U3YvYmxvZy13aXRoLXRyZWxsb1wiIHRhcmdldD1cIl9ibGFua1wiPlxyXG4gICAgICA8bGk+XHJcbiAgICAgICAgPHA+Tm8gUG9zdHMgeWV0LCBiZWdpbiB5b3VyIGpvdXJuZXkgb24gdHJlbGxvPC9wPlxyXG4gICAgICA8L2xpPlxyXG4gICAgPC9hPlxyXG4gIHsvaWZ9XHJcbjwvdWw+XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBcUVXLEdBQUs7Ozs7Z0NBQVYsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFBQyxHQUFLOzs7OytCQUFWLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUJBVWtDLEdBQUcsSUFBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Z0VBQXJCLEdBQUcsSUFBQyxLQUFLOzs7Ozs7Ozs2REFBSSxHQUFHLElBQUMsSUFBSTs7eUZBQXJCLEdBQUcsSUFBQyxLQUFLOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUJBSDdCLEdBQUksSUFBQyxLQUFLOzs7O3lCQUNNLEdBQUksSUFBQyxJQUFJOzs7Ozs2QkFDbkIsR0FBSSxJQUFDLElBQUk7Ozs7a0NBQWQsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzswREFKcUIsR0FBSSxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dFQUVuQyxHQUFJLElBQUMsS0FBSztnRUFDTSxHQUFJLElBQUMsSUFBSTs7OzRCQUNuQixHQUFJLElBQUMsSUFBSTs7OztpQ0FBZCxNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O3NDQUFKLE1BQUk7OzttRkFKcUIsR0FBSSxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dCQU52QyxHQUFLLElBQUMsTUFBTSxJQUFJLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQW5FQSxPQUFPLEdBQUcsTUFBTSxFQUFFLEtBQUs7Y0FDOUIsSUFBSSxDQUFDLEtBQUssZUFDcEIsSUFBSSxDQUFFLENBQUMsSUFBSyxDQUFDLENBQUMsSUFBSSxJQUNsQixJQUFJLENBQUUsS0FBSztXQUNELEtBQUs7Ozs7O09BTVQsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
